https://github.com/YeonjiKim0316/fisa-flask


## index.html
{% extends 'base.html' %}

{% block content %}
<!-- Main-->
<div id="main">

    <div class="container px-5" id="one">
        <div class="row justify-content-center">
            <div class="col-lg-8 col-xxl-6">
                <div class="text-center my-5">
                    <h1 class="fw-bolder mb-3">Build things that build things!</h1>
                    <p class="lead fw-normal text-muted mb-4">김연지입니다</p>
                    <a class="btn btn-dark btn-lg" href="#scroll-target">WHO I AM</a>
                </div>
            </div>
        </div>
    </div>

            <!-- About section one-->
            <section class="py-5 bg-light about_me" id="scroll-target">
                <div class="container px-5 my-5"  id="two">
                    <div class="row gx-5 align-items-center">
                        <!-- <div class="col-lg-6"><img class="img-fluid rounded mb-5 mb-lg-0" src="../static/data/spongebob.jpg" alt="..." /></div> -->
                        <div class="col-lg-6"><img class="img-fluid rounded mb-5 mb-lg-0" src="{{ url_for('static', filename='data/spongebob.jpg') }}" alt="..." /></div>
                        <div class="col-lg-6">
                            <h2 class="fw-bolder">Programmer</h2>
                            <p class="lead fw-normal text-muted mb-0">1000번 안 되다가 1번 될 때 느끼는 희열감과<br>
                                내일은 되겠지, 라는 낙천성을 가진 개발자</p>
                        </div>
                    </div>
                </div>
            </section>
            <!-- About section two-->
            <section class="py-5" id="three">
                <div class="container px-5 my-5">
                    <div class="row gx-5 align-items-center">
                        <!-- <div class="col-lg-6 order-first order-lg-last"><img class="img-fluid rounded mb-5 mb-lg-0" src="data/profile.png" alt="..." /></div> -->
                        <div class="col-lg-6 order-first order-lg-last"><img class="img-fluid rounded mb-5 mb-lg-0" src="{{ url_for('static', filename='data/profile.png') }}" alt="..." /></div>

                        <div class="col-lg-6">
                            <h2 class="fw-bolder">Technical Editor</h2>
                            <p class="lead fw-normal text-muted mb-0">국어국문학을 전공한 개발자의 눈으로<br> 잘 이해되는 설명과 잘 돌아가는 코드를 가진<br> 책을 세상에 선보이는 지식노동자</p>
                        </div>
                    </div>
                </div>
            </section>

</div>

{% endblock %}




## base.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About 김연지</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
    <style>
        /* The navigation bar */
            .navbar {
            overflow: hidden;
            background-color: #333;
            position: fixed; /* Set the navbar to fixed position */
            top: 0; /* Position the navbar at the top of the page */
            width: 100%; /* Full width */
            }
    </style>
</head>
<body>

<!-- Header-->
<div id="header" class="py-5">
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark sticky-top">
        <div class="container px-5">
            <a class="navbar-brand">YEONJI KIM</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                    <li class="nav-item"><a class="nav-link" href="#one">Home</a></li>
                    <li class="nav-item"><a class="nav-link" href="#two">Developer</a></li>
                    <li class="nav-item"><a class="nav-link" href="#three">Technical Editor</a></li>
                </ul>

            </div>
        </div>
    </nav>
</div>

{% block content %}


<!-- 계속 변경될 부분 -->

{% endblock%}
<!-- Footer-->
<div id="footer" class="bg-dark py-4 mt-auto">
    <div class="container px-5">
        <div class="row align-items-center justify-content-between flex-column flex-sm-row">
            <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; YEONJIKIM 2023</div></div>
            <div class="col-auto">
                <span class="text-white mx-1">atangi@naver.com</span>
                <span class="text-white mx-1">&middot;</span>
                <a class="link-light small" href="mailto:atangi@naver.com">Contact</a>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>

</body>
</html>


## question_detail.html
# question/question_detail.html
<div class="container my-3">
    <!-- 질문 -->
    <h2 class="border-bottom py-2">{{ question.subject }}</h2>
    <div class="card my-3">
        <div class="card-body">
            <div class="card-text" style="white-space: pre-line;">{{ question.content }}</div>
            <div class="d-flex justify-content-end">
                <div class="badge bg-light text-dark p-2">
                    {{ question.create_date }}
                </div>
            </div>
        </div>
    </div>
    
    
## question_list.html
<!-- 질문 목록 -->
{#  render_template 함수에서 전달받은 질문 목록 데이터 question_list가 있는지 검사 #}

<div class="container my-3">
    <table class="table">
        <thead>
        <tr class="table-dark">
            <th>번호</th>
            <th>제목</th>
            <th>작성일시</th>
        </tr>
        </thead>
        <tbody>
        {% if question_list %}
        {% for question in question_list %}
        <tr>
            <td>{{ loop.index }}</td>
            <td>
                <a href="{{ url_for('board.post_detail', question_id=question.id) }}">{{ question.subject }}</a>
            </td>
            <td>{{ question.create_date }}</td>
        </tr>
        {% endfor %}
        {% else %}
        <tr>
            <td colspan="3">질문이 없습니다.</td>
        </tr>
        {% endif %}
        </tbody>
    </table>
</div>


 https://github.com/YeonjiKim0316/fisa-flask.git

#footer {
                overflow: hidden;
                background-color: #333;
                position: fixed; /* Set the navbar to fixed position */
                bottom: 0; /* Position the navbar at the top of the page */
                width: 100%; /* Full width */
                }
                
                
## forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField
from wtforms.validators import DataRequired

class QuestionForm(FlaskForm):
												# 화면에서 출력할 해당 필드의 라벨, 필수 항목 체크 여부
    subject = StringField('제목', validators=[DataRequired()])
    content = TextAreaField('내용', validators=[DataRequired()])

####
사


# app/templates/question/question_form.html
{% extends 'base.html' %}
{% block content %}
<!-- 질문 등록 -->
<div class="container">
    <h5 class="my-3 border-bottom pb-2">질문 올리기</h5>
    {# <form class="my-3" action="{{ url_for('board.create') }}"> #}
	<form method="post" class="my-3" action="{{ url_for('board.create') }}">
        {{ form.csrf_token }}

		{# Form에서 작성한 라벨 #}
        {{ form.subject.label }}

		{# Form에서 작성한 필드. 값을 입력 받아야 하는 '폼'이므로 호출연산자로 작성 #}
        {{ form.subject(class="form-control") }}

        {{ form.content.label }}
        {{ form.content(class="form-control") }}

        <button type="submit" class="btn btn-primary">저장</button>
    </form>
</div>
{% endblock %}


## views/board_views.py
from ..forms import QuestionForm
from datetime import datetime
from test import db    


@board.route('/create', methods=['GET', 'POST'])	
def create():
    # 폼을 받는다
    form = QuestionForm()

    # 폼에 온 양식이 우리가 forms.py에 작성한 양식과 일치하는지 확인한다
    if form.validate_on_submit():
    # 일치하면 성공을 의미하는 주소로 전달한다
        # 실제 db에 값을 넣는 로직이 없습니다

       q = Question(subject=form.subject.data, \
                   content=form.content.data, \
                    create_date=datetime.now())                                                 
       db.session.add(q)
       db.session.commit()
       return render_template('submit.html')
    
    return render_template('question/question_form.html', form=form)


### 어제 flask shell에 작성한 코드
## flask shell
>>> from test.models import Question
>>> from datetime import datetime
>>> q = Question(subject="제목입니다", content="내용입니다", create_date=datetime.now())
>>> q
<Question (transient 2955131385264)>
>>> from test import db                                                           
>>> db.session.add(q)         
>>> db.session.commit()



## question_form.html
<!-- 오류표시 Start -->
        {% if form.errors %}
        <div class="alert alert-danger" role="alert">
            {% for field, errors in form.errors.items() %}
            <strong>{{ form[field].label }}</strong>
            <ul>
                {% for error in errors %}
                <li>{{ error }}</li>
                {% endfor %}
            </ul>
            {% endfor %}
        </div>
        {% endif %}
        <!-- 오류표시 End -->
        
        

# 답변에 관한 기능 작성
    1) Model - models.py, forms.py  v
    2) View - views/answer_views.py
            - /answer 로 시작하는 경로로 제어합니다.
    3) Template - answer_form.html에 작성
    
    
a = Answer(question_id=1, content="1번 글에 대한 답변입니다", create_date=datetime.now())
>>> a
<Answer (transient 2955131376432)>
>>> db.session.add(a)   
>>> db.session.commit()  


## answer/answer_views.py
from flask import Blueprint, redirect, render_template
from ..forms import AnswerForm
from test import db
from datetime import datetime
from ..models import Answer

answer = Blueprint('answer', __name__, url_prefix="/answer")

@answer.route("/create/<int:question_id>", methods=["GET", "POST"])
def create(question_id):
    # AnswerForm으로 화면에서 받은 데이터를
    form = AnswerForm()
    # 우리가 요청한 조건에 맞으면
    if form.validate_on_submit():
        a = Answer(question_id=question_id, content=form.content.data, create_date=datetime.now())
        # DB에 저장
        db.session.add(a)   
        db.session.commit()  
    # 후 원래 페이지로 redirect ('submit.html')
        return render_template('submit.html')
    # 빈 화면으로 넘기기
    return render_template('answer/answer_form.html', form=form)
    
    
## answer_views.py
from flask import Blueprint, redirect, render_template, url_for
from ..forms import AnswerForm
from test import db
from datetime import datetime
from ..models import Answer

answer = Blueprint('answer', __name__, url_prefix="/answer")

@answer.route("/create/<int:question_id>", methods=["GET", "POST"])
def create(question_id):
    # AnswerForm으로 화면에서 받은 데이터를
    form = AnswerForm()
    # 우리가 요청한 조건에 맞으면
    if form.validate_on_submit():
        a = Answer(question_id=question_id, content=form.content.data, create_date=datetime.now())
        # DB에 저장
        db.session.add(a)   
        db.session.commit()  
    # 후 원래 페이지로 redirect ('submit.html')
        return redirect (url_for ('question.post_detail'))
    # 빈 화면으로 넘기기
    return render_template('question/question_detail.html', form=form)\
    
    
    
  # answer/answer_detail.html
  {% extends 'base.html' %}
{% block content %}
<!-- 답변 등록 -->
<div class="container">
    <h5 class="my-3 border-bottom pb-2">답변 올리기</h5>
    {# <form class="my-3" action="{{ url_for('board.create') }}"> #}
	<form method="post" class="my-3" action="{{ url_for('answer.create', question_id=question_id) }}">
    <!-- 오류표시 Start -->
    {% if form.errors %}
    <div class="alert alert-danger" role="alert">
        {% for field, errors in form.errors.items() %}
        <strong>{{ form[field].label }}</strong>
        <ul>
            {% for error in errors %}
            <li>{{ error }}</li>
            {% endfor %}
        </ul>
        {% endfor %}
    </div>
    {% endif %}
    <!-- 오류표시 End -->
        {{ form.csrf_token }}

        {{ form.content.label }}
        {{ form.content(class="form-control") }}

        <button type="submit" class="btn btn-primary">답변완료</button>
    </form>
</div>
<br>
<br>
<br>
<br>
<br>
<br>
{% endblock %}


# views/answer_views.py
from flask import Blueprint, redirect, render_template, url_for
from ..forms import AnswerForm
from test import db
from datetime import datetime
from ..models import Answer

answer = Blueprint('answer', __name__, url_prefix="/answer")

@answer.route("/create/<int:question_id>", methods=["GET", "POST"])
def create(question_id):
    # AnswerForm으로 화면에서 받은 데이터를
    form = AnswerForm()
    # 우리가 요청한 조건에 맞으면
    if form.validate_on_submit():
        a = Answer(question_id=question_id, content=form.content.data, create_date=datetime.now())
        # DB에 저장
        db.session.add(a)   
        db.session.commit()  
    # 후 원래 페이지로 redirect ('submit.html')
        return redirect (url_for ('board.post_detail', question_id=question_id))
    # 빈 화면으로 넘기기
    return render_template('question/question_detail.html', question_id=question_id, form=form)
    
    
    
    
    
        <h5 class="border-bottom my-3 py-2">{{ question.answer_set|length }}개의 답변이 있습니다.</h5>
    {% for answer in question.answer_set %}
    <div class="card my-3">
        <div class="card-body">
            <div class="card-text" style="white-space: pre-line;">{{ answer.content }}</div>
            <div class="d-flex justify-content-end">
                <div class="badge bg-light text-dark p-2">
                    {{ answer.create_date }}
                </div>
            </div>
        </div>
    </div>
    {% endfor %}
    
    
    datetime.strptime('31/01/22 23:59:59.999999',
                  '%d/%m/%y %H:%M:%S.%f')
                  
__init__.py            
    # 커스텀 필터 사용
    from filter import format_datetime
    test.jinja.env.filters['date_time'] = format_datetime
    
filter.py
from datetime import datetime

## 필터를 템플릿에서 사용하는 법 어디든 별도 파일에 작성하고 
## __init__.py의 create_app() 안에 등록해주면 끝 

## 함수를 만들어서 함수명을 이름처럼 사용합니다
def format_datetime(value, fmt="%Y년 %m월 %d일 %H:%M"):
    return datetime.strptime(value, fmt)
    
    
https://github.com/YeonjiKim0316/fisa-flask.git  

# answer_form.html에서 사용하는 날짜들에 대해서 date_time2라는 필터를 만들어서 별도의 필터를 적용하기
# woorifisa에서 복습
  #1) 어제 작업한 뒤 이어서 woorifisa에다가 오늘 만든 form 양식을 넣어 화면에서 입력받은 값을 db에 넣고 출력하기
  #2) board_detail.html에 answer_detail.html을 include 했을 때 꼬이지 않게 로직 변경하기
  #3) filter를 통해 필요한 데이터를 db에 들어있는 것과 다른 양식으로 화면에 출력하기

https://github.com/YeonjiKim0316/fisa-flask.git    
