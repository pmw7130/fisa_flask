https://github.com/YeonjiKim0316/fisa-flask


q = Question(subject='글제목:[%03d]' % i, content='글내용', create_date=datetime.now())


for i in range(100):	
    q = Question(subject='글제목:[%03d]' % i, content='글내용', create_date=datetime.now())
    db.session.add(q)
    
@board.route("/list")   # /list   /list?page=1
def _list():
    page = request.args.get('page', type=int, default=1)
    question_list = Question.query.order_by(Question.create_date.desc())
    question_list = question_list.paginate(page=page, per_page=10)
    return render_template("question/question_list.html", question_list=question_list)



<!-- 페이징처리 시작 -->
    <ul class="pagination justify-content-center">
        <!-- 이전페이지 -->
        {% if question_list.has_prev %}
        <li class="page-item">
            <a class="page-link" href="?page={{ question_list.prev_num }}">이전</a>
        </li>
        {% else %}
                <!-- 이전 페이지가 있는 경우에는 "이전" 링크가 활성화, 이전 페이지가 없는 경우에는 "이전" 링크가 비활성화 -->
        <li class="page-item disabled">
            <a class="page-link" tabindex="-1" aria-disabled="true" href="javascript:void(0)">이전</a>
        </li>
        {% endif %}
        <!-- 페이지번호 -->
        {% for page_num in question_list.iter_pages() %}
        {% if page_num %}
        {% if page_num != question_list.page %}
        <li class="page-item">
            <a class="page-link" href="?page={{ page_num }}">{{ page_num }}</a>
        </li>
        {% else %}
                <!-- 현재 페이지와 같을 경우에는 active클래스를 적용하여 강조 -->
        <li class="page-item active" aria-current="page">
            <a class="page-link" href="javascript:void(0)">{{ page_num }}</a>
        </li>
        {% endif %}
        {% else %}
        <li class="disabled">
            <a class="page-link" href="javascript:void(0)">...</a>
        </li>
        {% endif %}
        {% endfor %}
        <!-- 다음페이지 -->
        {% if question_list.has_next %}
        <li class="page-item">
            <a class="page-link" href="?page={{ question_list.next_num }}">다음</a>
        </li>
        {% else %}
        <li class="page-item disabled">
            <a class="page-link" tabindex="-1" aria-disabled="true" href="javascript:void(0)">다음</a>
        </li>
        {% endif %}
    </ul>
    <!-- 페이징처리 끝 -->
    </div>
    
    
                    <li class="nav-item">/<a class="btn btn-light" href="/board/list">Login</a></li>
                    <li class="nav-item">/<a class="btn btn-light" href="/board/list">SignUp</a></li>
 
 
 ### question_list.html
 {% extends 'base.html' %}

{% block content %}


<!-- 질문 목록 -->
{#  render_template 함수에서 전달받은 질문 목록 데이터 question_list가 있는지 검사 #}

<div class="container my-3">
    <a class="btn btn-primary float-end" href="{{ url_for('board.create')}}">질문 등록</a>
    <br>
    <br>
    <table class="table">
        <thead>
        <tr class="table-dark">
            <th>번호</th>
            <th>제목</th>
            <th>작성일시</th>
        </tr>
        </thead>
        <tbody>
        {% if question_list %}
        {% for question in question_list.items %}
        <tr>
            <td>{{ loop.index }}</td>
            <td>
                <a href="{{ url_for('board.post_detail', question_id=question.id) }}">{{ question.subject }}</a>
            </td>
            <td>{{ question.create_date }}</td>
        </tr>
        {% endfor %}
        {% else %}
        <tr>
            <td colspan="3">질문이 없습니다.</td>
        </tr>
        {% endif %}
        </tbody>
    </table>

    <!-- 페이징처리 시작 -->
    <ul class="pagination justify-content-center">
        <!-- 이전페이지 -->
        {% if question_list.has_prev %}
        <li class="page-item">
            <a class="page-link" href="?page={{ question_list.prev_num }}">이전</a>
        </li>
        {% else %}
                <!-- 이전 페이지가 있는 경우에는 "이전" 링크가 활성화, 이전 페이지가 없는 경우에는 "이전" 링크가 비활성화 -->
        <li class="page-item disabled">
            <a class="page-link" tabindex="-1" aria-disabled="true" href="javascript:void(0)">이전</a>
        </li>
        {% endif %}
        <!-- 페이지번호 -->
        {% for page_num in question_list.iter_pages() %}
        {% if page_num %}
        {% if page_num != question_list.page %}
        <li class="page-item">
            <a class="page-link" href="?page={{ page_num }}">{{ page_num }}</a>
        </li>
        {% else %}
                <!-- 현재 페이지와 같을 경우에는 active클래스를 적용하여 강조 -->
        <li class="page-item active" aria-current="page">
            <a class="page-link" href="javascript:void(0)">{{ page_num }}</a>
        </li>
        {% endif %}
        {% else %}
        <li class="disabled">
            <a class="page-link" href="javascript:void(0)">...</a>
        </li>
        {% endif %}
        {% endfor %}
        <!-- 다음페이지 -->
        {% if question_list.has_next %}
        <li class="page-item">
            <a class="page-link" href="?page={{ question_list.next_num }}">다음</a>
        </li>
        {% else %}
        <li class="page-item disabled">
            <a class="page-link" tabindex="-1" aria-disabled="true" href="javascript:void(0)">다음</a>
        </li>
        {% endif %}
    </ul>
    <!-- 페이징처리 끝 -->
    </div>

</div>
<br>
<br>
{% endblock %}


<td>{{ question_list.total - ((question_list.page-1) * question_list.per_page) - loop.index0 }}</td>


### forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField, PasswordField, EmailField
from wtforms.validators import DataRequired, Length, EqualTo, Email

(... 생략 ...)

class UserCreateForm(FlaskForm):
    username = StringField('사용자이름', validators=[DataRequired(), Length(min=3, max=25)])
    password1 = PasswordField('비밀번호', validators=[
        DataRequired(), EqualTo('password2', '비밀번호가 일치하지 않습니다')])
    password2 = PasswordField('비밀번호확인', validators=[DataRequired()])
    email = EmailField('이메일', validators=[DataRequired(), Email()])
    
    
    pip install email_validator
    
    
from flask import Blueprint, request, redirect, render_template, flash, url_for
from test.forms import UserCreateForm
from test.models import User
from test import db

auth = Blueprint('auth', __name__, url_prefix="/auth")
# __init__ 의 create_app 안에 등록



# 회원 가입 - signup
@auth.route("/signup", methods=['GET', 'POST'])
def signup():
    #1. 폼을 가져온다
    form = UserCreateForm()

    ## update와 유사한 로직으로 작동합니다 
    #2-1. 폼의 유효성을 확인한다 & db에 해당하는 사용자이름이 있는지도 확인
    if form.validate_on_submit() and request.method == 'POST':
        user = User.query.filter_by(username=form.username.data).first()
        if not user:
            #2-1-1. db의 user 테이블에 값을 넣는다  
            user = User(username=form.username.data, \
                        password=form.password1.data, \
                        email=form.email.data)                                                 
            db.session.add(user)
            db.session.commit()
            return redirect( url_for( 'main.index' ) )
        #2-1-2. 이미 존재하는 사용자입니다
        else:
            flash('이미 가입한 아이디입니다')
    #2-2. 다시 auth/signup.html로 이동시킵니다.
    return render_template('auth/signup.html', form=form)


  # 로그인 - login
# @auth.route("/login")

# 로그아웃 - logout 
# @auth.route("/logout")


## auth/signup.html
{% extends "base.html" %}
{% block content %}
<div class="container">
    <h5 class="my-3 border-bottom pb-2">회원 가입</h5>
    <form method="post"> <!-- action 속성이 지정되어 있지 않으면 다음 경로에 대한 지시가 없으므로 현재 주소를 post로 한번 더 호출하게 됨 -->
        {{ form.csrf_token }}
        <div class="mb-3">
            <label for="username">사용자 이름</label>
            <input type="text" class="form-control" name="username" id="username"
                   value="{{ form.username.data or '' }}">
        </div>
        <div class="mb-3">
            <label for="password1">비밀번호</label>
            <input type="password" class="form-control" name="password1" id="password1"
                   value="{{ form.password1.data or '' }}">
        </div>
        <div class="mb-3">
            <label for="password2">비밀번호 확인</label>
            <input type="password" class="form-control" name="password2" id="password2"
                   value="{{ form.password2.data or '' }}">
        </div>
        <div class="mb-3">
            <label for="email">이메일</label>
            <input type="text" class="form-control" name="email" id="email"
                   value="{{ form.email.data or '' }}">
        </div>
        <button type="submit" class="btn btn-primary">생성하기</button>
    </form>
</div>
{% endblock %}

----- 
{% extends 'base.html' %}
{% block content %}
회원가입

<form method="post">
    {{ form.csrf_token }}
    
    {{ form.username.data }}
    {{ form.password1.data }}
    {{ form.password2.data }}
    {{ form.email.data }}
    <button type="submit">회원가입</button>
</form>

{% endblock %}
----



<!-- flash 오류 -->
{% for message in get_flashed_messages() %}
<div class="alert alert-danger" role="alert">
    {{ message }}
</div>
{% endfor %}

# 1. 어제 만들었던 에러 페이지들을 include form_errors.html로 넘겨주세요
# 2. flash에 뜨는 에러메시지들을 좀더 구체적으로 남겨주세요



from flask import Blueprint, request, render_template, flash, url_for, session, g
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import redirect
from app.models import User
from app import db
from app.forms import UserCreateForm, UserLoginForm

(... 생략 ...)

# /login/ URL과 매핑되는 login 함수는 signup 함수와 비슷하게 동작합니다. POST 방식에는 로그인을 수행하고, GET 요청에는 로그인 화면을 보여줍니다.
@auth.route('/login/', methods=('GET', 'POST'))
def login():
    form = UserLoginForm()
    if request.method == 'POST' and form.validate_on_submit():
        error = None
				# 폼 입력으로 받은 username으로 데이터베이스에 해당 사용자가 있는지를 검사한다. 만약 사용자가 없으면 "존재하지 않는 사용자입니다."라는 오류를 발생시키고, 사용자가 있다면 폼 입력으로 받은 password와 check_password_hash 함수를 사용하여 데이터베이스의 비밀번호와 일치하는지를 비교합니다.
        user = User.query.filter_by(username=form.username.data).first()
        if not user:
            error = "존재하지 않는 사용자입니다."
        elif not check_password_hash(user.password, form.password.data):
            error = "비밀번호가 올바르지 않습니다."
        if error is None:
            # 사용자도 존재하고 비밀번호도 일치한다면 플라스크 세션(session)에 사용자 정보를 저장합니다.

						# 세션에 user_id라는 객체 생성
            session.clear()
            session['user_id'] = user.id
            _next = request.args.get('next', '')
            if _next:
                return redirect(_next)
            else:
                return redirect(url_for('main.index'))
        flash(error)
    return render_template('auth/login.html', form=form)


# auth로 시작하는 블루프린트가 주소창에 가기 전에 무조건 실행되는 애너테이션
@auth.before_app_request
def load_logged_in_user():
    user_id = session.get('user_id')
    if user_id is None:
         # 없으면 로그아웃 상태라는 것을 파악한다
        g.user = None
    else:
        # @auth 를 통해서 라우팅을 하면 로그인이 되어있으면 로그인 사람의 모든 회원정보를 테이블에 가져오고
        g.user = User.query.get(user_id)
        print(g.user, g.user.username)


@auth.route('/logout/')
def logout():
    session.clear()
    return redirect(url_for('basic.index'))


def login_required(view):
    @functools.wraps(view)
    def wrapped_view(*args, **kwargs):
        if g.user is None:
            _next = request.url if request.method == 'GET' else ''
            return redirect(url_for('auth.login', next=_next))
        return view(*args, **kwargs)
    return wrapped_view
    
    
# navbar.html의 12~15
                    {% if g.user %}
                    <!-- g.user가 있으면 logout버튼이 보이도록 -->
                    <li class="nav-item">/<a class="btn btn-light" href="{{ url_for('auth.logout') }}">Logout</a></li>
                    <!-- g.user가 없을 때만 출력되도록 -->
                    {% else %}
                    <li class="nav-item">/<a class="btn btn-light" href="{{ url_for('auth.login') }}">Login</a></li>
                    <li class="nav-item">/<a class="btn btn-light" href="{{ url_for('auth.signup') }}">SignUp</a></li>
                    {% endif %}

   <a class="nav-link" href="#">{{ g.user.username }}</a>
   
   
   ## models.py
   from test import db

class Question(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    subject = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text(), nullable=False) # 텍스트가 길이 무제한
    create_date = db.Column(db.DateTime(), nullable=False)
    # user 테이블의 pk로 작성자를 구분
    user_id = db.Column(db.Integer, db.ForeignKey('user.id', ondelete='CASCADE'), nullable=False)
    user = db.relationship('User', backref=db.backref('question_set'))
    # user마다 어떤 글을 썼는지 역참조로 제공합니다. 


class Answer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    question_id = db.Column(db.Integer, db.ForeignKey('question.id', ondelete='CASCADE'))
    question = db.relationship('Question', backref=db.backref('answer_set'))
    content = db.Column(db.Text(), nullable=False)
    create_date = db.Column(db.DateTime(), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id', ondelete='CASCADE'), nullable=False)
    user = db.relationship('User', backref=db.backref('answer_set'))
    # user마다 어떤 글을 썼는지 역참조로 제공합니다. 

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(8), nullable=False, unique=True)
    password = db.Column(db.String(25), nullable=False)
    email  = db.Column(db.String(200), nullable=False, unique=True)
    
user_id = db.Column(db.Integer, db.ForeignKey('user.id', ondelete="CASCADE"), nullable=True, server_default="1")   


__init__.py
from sqlalchemy import MetaData


naming_convention = {q
    "ix": 'ix_%(column_0_label)s',
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(column_0_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s"
}
db = SQLAlchemy(metadata=MetaData(naming_convention=naming_convention))

def create_app():
    test= Flask(__name__)
    test.config.from_object(config)

    # ORM
    db.init_app(test)
		if test.config['SQLALCHEMY_DATABASE_URI'].startswith("sqlite"):
        migrate.init_app(test, db, render_as_batch=True)
		else:
        migrate.init_app(test, db)
        
        
## models.py
from test import db

class Question(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    subject = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text(), nullable=False) # 텍스트가 길이 무제한
    create_date = db.Column(db.DateTime(), nullable=False)
    # user 테이블의 pk로 작성자를 구분
    # user_id = db.Column(db.Integer, db.ForeignKey('user.id', ondelete="CASCADE"), nullable=True, server_default="1")
    user_id = db.Column(db.Integer, db.ForeignKey('user.id', ondelete='CASCADE'), nullable=False)
    user = db.relationship('User', backref=db.backref('question_set'))
    # user마다 어떤 글을 썼는지 역참조로 제공합니다. 


class Answer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    question_id = db.Column(db.Integer, db.ForeignKey('question.id', ondelete='CASCADE'))
    question = db.relationship('Question', backref=db.backref('answer_set'))
    content = db.Column(db.Text(), nullable=False)
    create_date = db.Column(db.DateTime(), nullable=False)
    # user_id = db.Column(db.Integer, db.ForeignKey('user.id', ondelete="CASCADE"), nullable=True, server_default="1")
    user_id = db.Column(db.Integer, db.ForeignKey('user.id', ondelete='CASCADE'), nullable=False)
    user = db.relationship('User', backref=db.backref('answer_set'))
    # user마다 어떤 글을 썼는지 역참조로 제공합니다. 

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(8), nullable=False, unique=True)
    password = db.Column(db.String(25), nullable=False)
    email  = db.Column(db.String(200), nullable=False, unique=True)
    
    
## __init__.py
from flask import Flask
from flask_migrate import Migrate
from flask_sqlalchemy import SQLAlchemy

# app.py인 곳을 입구로 찾아서 기본적으로 실행합니다
# 또는 FLASK_APP이라는 환경변수의 이름을 파일명으로 변경합니다
# set FLASK_APP=test 
# wsgi.py에 직접 키=밸류로 여러 환경변수들을 기입합니다.
from sqlalchemy import MetaData
import config

# db = SQLAlchemy()
migrate = Migrate()

naming_convention = {
    "ix": 'ix_%(column_0_label)s',
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(column_0_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s"
}

db = SQLAlchemy(metadata=MetaData(naming_convention=naming_convention))

def create_app():
    test= Flask(__name__)
    test.config.from_object(config)

    # ORM
    db.init_app(test)
    if test.config['SQLALCHEMY_DATABASE_URI'].startswith("sqlite"):
        migrate.init_app(test, db, render_as_batch=True)
    else:
        migrate.init_app(test, db)

    # 블루프린트
    from .views import main_views, board_views, answer_views, auth_views  # views 폴더 및의 main_views.py 임포트
    test.register_blueprint(main_views.bp)
    test.register_blueprint(board_views.board)
    test.register_blueprint(answer_views.answer)
    test.register_blueprint(auth_views.auth)
    
    # 커스텀 필터 사용
    from test.filter import format_datetime
    test.jinja_env.filters['date_time'] = format_datetime
    
    return test


# 1. 질문, 답변 작성시 userid가 함께 들어가도록 수정 
   # 1. user.id를 직접 넣는 법 - views/board_views.py
       q = Question(subject=form.subject.data, \
                   content=form.content.data, \
                    create_date=datetime.now(),
                    user_id=g.user.id)      
   # 2. user 객체를 넣는 법 - views/answer_views.py
           a = Answer(question_id=question_id, \
                   content=form.content.data, \
                    create_date=datetime.now(),
                    user=g.user)

# 2. 선택: 질문, 답변 화면에서 현재 작성자 id가 보이도록 작성
    {{ g.user.username }} 
    
# 3. 질문, 답변 확인시 누가 작성했는지 화면에 보이도록 변경
## question/question_detail.html
{% extends 'base.html' %}

{% block content %}

<div class="container my-3">
    <!-- 질문 -->
    <h2 class="border-bottom py-2">{{ question.subject }}</h2>
    <div class="card my-3">
        <div class="card-body">
            <div class="card-text" style="white-space: pre-line;">{{ question.content }}</div>
            <div class="d-flex justify-content-end">
                <div class="badge bg-light text-dark p-2">
                    {{ question.user.username }}
                </div>
                <div class="badge bg-light text-dark p-2">
                    {{ question.create_date | date_time }}
                </div>
            </div>
        </div>
    </div>
       
    {% include 'answer/answer_form.html' %}
    
    <h5 class="border-bottom my-3 py-2">{{ question.answer_set|length }}개의 답변이 있습니다.</h5>
    {% for answer in question.answer_set %}
    <div class="card my-3">
        <div class="card-body">
            <div class="card-text" style="white-space: pre-line;">{{ answer.content }}</div>
            <div class="d-flex justify-content-end">
                <div class="badge bg-light text-dark p-2">
                    {{ answer.user.username }}
                </div>
                <div class="badge bg-light text-dark p-2">
                    {{ answer.create_date }}
                </div>
            </div>
        </div>
    </div>
    {% endfor %}
    <br>
    <br>

    

{% endblock %}


import functools

def trace(func):                             # 호출할 함수를 매개변수로 받음
    def wrapper():
        print(func.__name__, '함수 시작')    # __name__으로 함수 이름 출력
        func()                               # 매개변수로 받은 함수를 호출
        print(func.__name__, '함수 끝')
    return wrapper                           # wrapper 함수 반환
 
 
 # 우리가 직접 어노테이션을 만들어서
# 접근이 불가한 페이지에 접근하면 로그인을 유도하도록 만든다
def login_required(view):
    @functools.wraps(view)
    def warpped_views(*args, **kwargs):   # create/list, ?page=1
        if g.user is None:
            _next = request.url if request.method == 'GET' else ''
            return redirect(url_for('auth.login', next=_next))
        return view(*args, **kwargs)
    return warpped_views
    
    

@board.route("/modify/<int:question_id>", methods=('GET', 'POST'))
@login_required
def modify(question_id):
    # 글을 가져온다
    question = Question.query.get_or_404(question_id)
    # 지금 글을 변경하려는 사람(로그인한사람)이 작성자인지 확인한다
    if g.user != question.user: 
        flash('수정권한이 없습니다')
    # 아니면 flash로 에러메시지 전달
    # 맞으면, post로 값이 왔으면
    if request.method == 'POST':
        form = QuestionForm()
        if form.validate_on_submit():
            form.populate_obj(question) # 화면에 원래 db에서 꺼낸 값을 변경해서 뿌림
            db.session.commit()
            return redirect(url_for('board.post_detail', question_id=question_id))
            # 값을 수정하여 다시 session에 commit
    else: # GET으로 요청이 왔을 때
        form = QuestionForm()
    return render_template('question/question_form.html', form=form)
    # 원래 화면으로 redirect

    # 수정화면으로 다시 form과 함께 돌려보냄


@board.route("/delete/<int:question_id>")
@login_required
def delete(question_id):
    # 글을 가져옴
    # 현재 접속한 사용자와 글의 작성자가 일치하는지 확인
        # 일치하지 않으면 -> 삭제권한이 없습니다 메시지 출력
        # 원래 글로 되돌아감
    
    # db.session.delete(글)
    #커밋
    # question_list로 되돌아감 


#### board_views.py

@board.route("/modify/<int:question_id>", methods=('GET', 'POST'))
@login_required
def modify(question_id):
    # 글을 가져온다
    question = Question.query.get_or_404(question_id)
    # 지금 글을 변경하려는 사람(로그인한사람)이 작성자인지 확인한다
    if g.user != question.user: 
        flash('수정권한이 없습니다')
    # 아니면 flash로 에러메시지 전달
    # 맞으면, post로 값이 왔으면
    if request.method == 'POST':
        form = QuestionForm()
        if form.validate_on_submit():
            form.populate_obj(question) # 화면에 원래 db에서 꺼낸 값을 변경해서 뿌림
            db.session.commit()
            return redirect(url_for('board.post_detail', question_id=question_id))
            # 값을 수정하여 다시 session에 commit
    else: # GET으로 요청이 왔을 때
        form = QuestionForm(obj=question)
    return render_template('question/question_form.html', form=form)
    # 원래 화면으로 redirect

    # 수정화면으로 다시 form과 함께 돌려보냄

@board.route("/delete/<int:question_id>")
@login_required
def delete(question_id):
    # 글을 가져옴
    question = Question.query.get_or_404(question_id)
    # 현재 접속한 사용자와 글의 작성자가 일치하는지 확인
    if g.user != question.user: 
        flash('삭제권한이 없습니다')
    #     일치하지 않으면 -> 삭제권한이 없습니다 메시지 출력
        return redirect(url_for('board.post_detail', question_id=question_id))
    #     원래 글로 되돌아감
    db.session.delete(question)
    db.session.commit()
    # 커밋
    # question_list로 되돌아감 
    return redirect(url_for('board.post_list'))

