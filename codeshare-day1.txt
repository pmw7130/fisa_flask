# pip를 통해 최소한의 가상환경을 생성하는 명령어
$ python -m venv myproject
$ cd myproject\Scripts
C:\itstudy\06_flask\flak01\myproject\Scripts> activate
$ (myproject) C:\itstudy\06_flask\flak01\myproject\Scripts>

# 파이썬 내장 모듈로 웹 서버 실행하기
$ python -m http.server 8080

$ deactivate


$ python -m pip install --upgrade pip
$ pip install flask


### test.py
from flask import Flask

# app.py인 곳을 입구로 찾아서 기본적으로 실행합니다
# 또는 FLASK_APP이라는 환경변수의 이름을 파일명으로 변경합니다
# set FLASK_APP=test 
# wsgi.py에 직접 키=밸류로 여러 환경변수들을 기입합니다.
app = Flask(__name__)

@app.route("/")
def hello():
    return f'Hello {__name__}'

# localhost:5000/bye 로 접속하면 bye 만 출력되도록 컨트롤러를 만들어주세요


@echo off
set FLASK_APP=test
set FLASK_DEBUG=true
C:\ITStudy\09_flask\fisa-flask\myproject\Scripts\activate.bat


## 애플리케이션 팩토리
$ mkdir test
$ move test.py test/__init__.py  # 맥이나 리눅스에서는 move 대신 mv 명령어 사용
$ flask run



from flask import Flask

def create_app():
     app = Flask(__name__)

     # URL과 FLASK코드를 매핑하는 Flask 데코레이터
     # @app.route처럼 애노테이션으로 URL을 매핑하는 함수를 라우팅 함수라고 부릅니다.
     @app.route('/')
     def hello():
          return f'Hello, {__name__}'

     @app.route('/yeonji')
     def hello_yeonji():
          return f'Hello, yeonji'
    
     return app


mkdir views
cd views


# projects/myproject/test/views/main_views.py

from flask import Blueprint

bp = Blueprint('main', __name__, url_prefix='/')


@bp.route('/')
     def hello():
          return f'Hello, {__name__}'
          
## __init__.py에 추가

    from .views import main_views  # views 폴더 및의 main_views.py 임포트
    test.register_blueprint(main_views.bp)
    
## views/main_views.py
from flask import Blueprint

bp = Blueprint('main', __name__, url_prefix="/main")

@bp.route("/")
def hello():
    return f'main에서 작성한 Hello {__name__}'
    
    
## __init__.py
from flask import Flask

# app.py인 곳을 입구로 찾아서 기본적으로 실행합니다
# 또는 FLASK_APP이라는 환경변수의 이름을 파일명으로 변경합니다
# set FLASK_APP=test 
# wsgi.py에 직접 키=밸류로 여러 환경변수들을 기입합니다.

def create_app(): # 어플리케이션 팩토리 - 플라스크 서버가 실행될 때 가장 최초로 실행되는 생성자
    test = Flask(__name__)

    from .views import main_views  # views 폴더 및의 main_views.py 임포트
    test.register_blueprint(main_views.bp)
    
    return test
    
    
## test/views/main_views.py
from flask import Blueprint

bp = Blueprint('main', __name__, url_prefix="/")

@bp.route("/")
def hello():
    return f'main에서 작성한 Hello {__name__}'

@bp.route("/bye")
def bye():
    return f'BYE'
  
  
https://github.com/YeonjiKim0316/fisa-ai-flask


from flask import Flask
from flask_migrate import Migrate
from flask_sqlalchemy import SQLAlchemy

# app.py인 곳을 입구로 찾아서 기본적으로 실행합니다
# 또는 FLASK_APP이라는 환경변수의 이름을 파일명으로 변경합니다
# set FLASK_APP=test 
# wsgi.py에 직접 키=밸류로 여러 환경변수들을 기입합니다.

import config

db = SQLAlchemy()
migrate = Migrate()


## test/__init__.py
def create_app(): # 어플리케이션 팩토리 - 플라스크 서버가 실행될 때 가장 최초로 실행되는 생성자
    test = Flask(__name__)

    # ORM
    test.config.from_object(config)
    db.init_app(test)
    migrate.init_app(test, db)

    # 블루프린트
    from .views import main_views  # views 폴더 및의 main_views.py 임포트
    test.register_blueprint(main_views.bp)
    
    return test
    
    
  # 
from test import db

class Question(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    subject = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text(), nullable=False)
    create_date = db.Column(db.DateTime(), nullable=False)
    
class Answer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    question_id = db.Column(db.Integer, db.ForeignKey('question.id', ondelete='CASCADE'))
    question = db.relationship('Question', backref=db.backref('answer_set'))
    content = db.Column(db.Text(), nullable=False)
    create_date = db.Column(db.DateTime(), nullable=False)


## flask shell
>>> from test.models import Question
>>> from datetime import datetime
>>> q = Question(subject="제목입니다", content="내용입니다", create_date=datetime.now())
>>> q
<Question (transient 2955131385264)>
>>> from test import db                                                           
>>> db.session.add(q)         
>>> db.session.commit()
>>> q
<Question 1>
>>> q.id
1
>>> q.content
'내용입니다'
>>> q.subject
'제목입니다'
>>> Question.query.all()
[<Question 1>]
>>> Question.query.filter(Question.id==1).all()
[<Question 1>]
>>> q
<Question (transient 2955131821776)>
>>> db.session.add(q)   
>>> db.session.commit() 
>>> Question.query.all()
[<Question 1>, <Question 2>]
>>> q = Question(subject="제목입니다", content="내용입니다", create_date=datetime.now())
>>> q1 = Question(subject="날씨가 추위입니다", content="내용입니다", create_date=datetime.now())
>>> q
<Question (transient 2955131387856)>
>>> q1
<Question (transient 2955131822592)>
>>> db.session.add(q)    
>>> db.session.add(q1) 
>>> db.session.commit()  
>>> Question.query.filter(Question.id==2).all() 
[<Question 2>]
>>> Question.query.filter(Question.id==2).all()
[<Question 2>]
>>> q = Question.query.filter(Question.id==2).all() 
>>> q.subject
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'list' object has no attribute 'subject'
>>> q.content
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'list' object has no attribute 'content'
>>> q = Question.query.filter(Question.id==2).get() 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: Query.get() missing 1 required positional argument: 'ident'
>>> q = Question.query.get(2)                        
>>> q
<Question 2>
>>> q.subject
'제목입니다2'
>>> q = Question.query.filter(Question.subject.like("%날씨%")).get() 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: Query.get() missing 1 required positional argument: 'ident'
>>> q = Question.query.filter(Question.subject.like("%날씨%")).all() 
>>> q
[<Question 4>]
>>> q[0]
<Question 4>
>>> q[0].subject
'날씨가 추위입니다'
>>> q[0].subject = "날씨가 매우 춥습니다"
>>> q[0].subject                         
'날씨가 매우 춥습니다'
>>> db.session.commit()
>>> q
[<Question 4>]
>>> db.session.delete(q)
Traceback (most recent call last):
  File "C:\ITStudy\09_flask\fisa-flask\myproject\lib\site-packages\sqlalchemy\orm\session.py", line 3478, in delete
    state = attributes.instance_state(instance)
AttributeError: 'list' object has no attribute '_sa_instance_state'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\ITStudy\09_flask\fisa-flask\myproject\lib\site-packages\sqlalchemy\orm\scoping.py", line 672, in delete
    return self._proxied.delete(instance)
  File "C:\ITStudy\09_flask\fisa-flask\myproject\lib\site-packages\sqlalchemy\orm\session.py", line 3480, in delete
    raise exc.UnmappedInstanceError(instance) from err
sqlalchemy.orm.exc.UnmappedInstanceError: Class 'builtins.list' is not mapped     
>>> db.session.delete(q[0])
>>> db.session.commit()     

- 여러분의 이름을 question 테이블의 content 속성에 넣어서 1개 글을 작성하세요
- filter를 사용해서 그 글을 가져와보세요
- 글의 content를 '신짱구'로 변경해보세요
- 그 글을 삭제해주세요

>>> db.session.delete(q[0]) 
>>> db.session.commit()     
>>> a = Answer(question_id=1, content="1번 글에 대한 답변입니다", create_date=datetime.now())
>>> a
<Answer (transient 2955131376432)>
>>> db.session.add(a)   
>>> db.session.commit()  
>>> a
<Answer 1>
>>> a.question_id
1
>>> a.question   
<Question 1>
>>> a.question.content
'내용입니다'
>>> a.question.subject
'제목입니다'
>>> q = a.question    
>>> db.session.delete(q[0]) 
>>> db.session.commit()     
>>> a = Answer(question_id=1, content="1번 글에 대한 답변입니다", create_date=datetime.now())
>>> a
<Answer (transient 2955131376432)>
>>> db.session.add(a)   
>>> db.session.commit()  
>>> a
<Answer 1>
>>> a.question_id
1
>>> a.question   
<Question 1>
>>> a.question.content
'내용입니다'
>>> a.question.subject
'제목입니다'
>>> q = a.question    
>>> q.answer_set                                                                  
[<Answer 1>]
>>> a = Answer(question_id=1, content="두번째 1번 글에 대한 답변입니다", create_date=datetime.now())
>>> a
<Answer (transient 2955131818416)>
>>> db.session.add(a)
>>> db.session.commit()  
>>> q.answer_set
[<Answer 1>, <Answer 2>]
>>> q.answer_set[1].content
'두번째 1번 글에 대한 답변입니다'


{# <% %> = {% %}
<%= %> = {{ }}
<%-- --%> = {# ... #} 
<jsp include: > = {% include 'header.html' %} #}


{% for item in list %}
    <p>순서: {{ loop.index }} </p>
    <p>{{ item }}</p>
{% endfor %}

https://docs.sqlalchemy.org/en/13/orm/query.html
https://sqlitebrowser.org/dl/


## templates/post_list.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    {% for item in question_list %}
    <p>순서: {{ loop.index }} </p>
    <p>제목: {{ item.subject }}</p>
    <p>내용: {{ item.content }}</p>
    <p>게시일: {{ item.create_date }}</p>
    {% endfor %}


</body>
</html>


{% if 조건문1 %}
    <p>조건문1에 해당하면 실행</p>
{% elif 조건문2 %}
    <p>조건문2에 해당하면 실행</p>
{% else %}
    <p>조건문1, 2 모두 해당하지 않으면 실행</p>
{% endif %}


## 상세 게시판 글 조회를 위한 MVC
# templates/question_detail.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=\, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    제목
    내용
    게시일
</body>
</html>


# views/board_views.py
from flask import Blueprint, render_template
from ..models import Question, Answer

# 우리가 부를 이름, flask 프레임워크가 찾을 이름, 라우팅주소
board = Blueprint('board', __name__, url_prefix="/board")

@board.route("/post")
def post_list():
    question_list = Question.query.all()
    return render_template("question_list.html", question_list=question_list)

# board/detail/1 2 3 4  -> question_detail.html로 각 글의 실제 세부내용을 전달하고 싶어요
@board.route("/detail/<int:question_id>") # 
def post_detail(question_id):

    return f"{question_id}"
    
    
## board_views.py    
from flask import Blueprint, render_template
from ..models import Question, Answer

# 우리가 부를 이름, flask 프레임워크가 찾을 이름, 라우팅주소
board = Blueprint('board', __name__, url_prefix="/board")

@board.route("/post")
def post_list():
    question_list = Question.query.all()
    return render_template("question_list.html", question_list=question_list)

# board/detail/1 2 3 4  -> question_detail.html로 각 글의 실제 세부내용을 전달하고 싶어요
@board.route("/detail/<int:question_id>") # question_id 변수로 받은 값을 
def post_detail(question_id): # 함수의 파라미터로 전달
    # question = Question.query.get(question_id) # 모델에서 특정 번호(id)를 통해 값을 조회 
    question = Question.query.get_or_404(question_id)
    return render_template("question_detail.html", ques = question)


# views/main_views.py
from flask import Blueprint
from ..models import Question

# 우리가 부를 이름, flask 프레임워크가 찾을 이름, 라우팅주소
bp = Blueprint('main', __name__, url_prefix="/")

# 첫번째 blueprint부터 찾기 때문에 board를 쓸 수 없게 됩니다 
# @bp.route("/", defaults={"var":'', "var2":""}) # 여러개의 route 어노테이션을 하나의 메서드에 얹어서 쓸 수도 있다
# @bp.route("/<var>/<var2>")  #대부분 uri는 str로 받기 때문에 str은 생략 # localhost:5000/yeonji  -> hello yeonji가 출력되도록 
@bp.route("/") 
def hello(var, var2):

    return f'main에서 작성한 Hello {var} {var2}'

@bp.route("/bye")
def bye():
    return f'BYE'
    
    
## templates/post_detail.html
        {% for ans in ques.answer_set %}
        <hr>
            {{ ans.id }} <br>
            {{ ans.content }} <br>
            {{ ans.create_date }} <br>
        {% endfor %}
        
## templates/post_list.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    {% for item in question_list %}
    <p>순서: {{ loop.index0 }} </p>
    <p>제목: <a href="/board/detail/{{ item.id }}"> {{ item.subject }}</a></p>
    <p>게시일: {{ item.create_date }}</p>
    {% endfor %}

    {% if False %}
        <p>조건문1에 해당하면 실행</p>
    {% elif True %}
        <p>조건문2에 해당하면 실행</p>
    {% else %}
        <p>조건문1, 2 모두 해당하지 않으면 실행</p>
    {% endif %}


</body>
</html>

https://github.com/YeonjiKim0316/fisa-flask

pip freeze > requirements.txt   
git add .
git commit -m "flask day 1"
git push origin main

// woorifisa 에다가 같은 작업을 해 보십시오
